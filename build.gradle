/*
 * Copyright (c) 2009 - 2025, DHBW Mannheim - TIGERs Mannheim
 */

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    alias(libs.plugins.sonar)
    alias(libs.plugins.versionCatalogUpdate)
    alias(libs.plugins.githubRelease)
    id 'idea'

    id 'sumatra.java'
    id 'sumatra.jib'
    id 'sumatra.application'
}

def gitDescribe = providers.exec {
    commandLine("git", "describe", "--tags", "--always", "--first-parent")
}.standardOutput.asText.map { it.replace("merge/", "").replace("version/", "").trim() }

version = gitDescribe.get()

processResources {
    inputs.property("project.version", project.version)
    filter ReplaceTokens, tokens: [
            "application.version": project.version,
    ]
}

dependencies {
    implementation project(':common')
    implementation project(':common-gui')
    implementation project(':common-gui-config')
    implementation project(':sumatra-model')
    implementation project(':sumatra-skillsystem')
    implementation project(':sumatra-snapshot')
    implementation project(':sumatra-simulation-control')
    implementation project(':sumatra-gui-skills')
    implementation project(':sumatra-gui-ai')
    implementation project(':sumatra-gui-bot')
    implementation project(':sumatra-gui-bot-params')
    implementation project(':sumatra-gui-log')
    implementation project(':sumatra-gui-rcm')
    implementation project(':sumatra-gui-referee')
    implementation project(':sumatra-gui-replay')
    implementation project(':sumatra-gui-sim')
    implementation project(':sumatra-gui-timer')
    implementation project(':sumatra-gui-ball-analyzer')
    implementation project(':sumatra-gui-logfile')
    implementation project(':sumatra-gui-kick')
    implementation project(':sumatra-gui-visualizer')
    implementation project(':autoreferee-gui')
    runtimeOnly project(':moduli-model-identification')
    implementation project(':moduli-botmanager')
    runtimeOnly project(':moduli-botmanager-sim')
    implementation project(':moduli-botmanager-tigers')
    implementation project(':moduli-ai')
    implementation project(':moduli-record')
    implementation project(':moduli-referee')
    implementation project(':moduli-wp')
    runtimeOnly project(':moduli-vision')
    implementation project(':moduli-cam')
    implementation project(':moduli-ai-controller')
    implementation project(':moduli-vision-simulation')
    implementation project(':moduli-autoreferee')
    runtimeOnly project(':moduli-autoreferee-ci')
    runtimeOnly project(':moduli-team-client')
    implementation project(':moduli-bot-params')

    implementation(libs.com.github.TIGERs.mannheim.infonode)

    implementation(libs.org.apache.logging.log4j.log4j.api)
    runtimeOnly(libs.org.apache.logging.log4j.log4j.core)

    implementation(libs.info.picocli.picocli)
    annotationProcessor(libs.info.picocli.picocli.codegen)
}

application {
    mainClass.set('edu.tigers.sumatra.Sumatra')
}

jib {
    to {
        image = "registry.gitlab.tigers-mannheim.de/main/sumatra"
        tags = [project.version.toString()]
    }
    container {
        mainClass = application.mainClass
        workingDirectory = "/Sumatra"
    }
    extraDirectories {
        paths {
            path {
                from = file('config')
                into = '/Sumatra/config'
            }
            path {
                from = file('src/main/jib')
                into = '/Sumatra/'
            }
        }
        permissions.put('/Sumatra/**', '777')
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "main_Sumatra_AXyeyj5BLG1xSGHUS0Xf"
        property "sonar.projectVersion", gitDescribe
        property "sonar.host.url", System.getenv("SONARQUBE_URL")
        property "sonar.login", System.getenv("SONARQUBE_AUTH_TOKEN")
        if (System.getenv("CI_MERGE_REQUEST_IID") != null) {
            property "sonar.pullrequest.key", System.getenv("CI_MERGE_REQUEST_IID")
            property "sonar.pullrequest.branch", System.getenv("CI_MERGE_REQUEST_SOURCE_BRANCH_NAME")
            property "sonar.pullrequest.base", System.getenv("CI_MERGE_REQUEST_TARGET_BRANCH_NAME")
        } else {
            property "sonar.branch.name", System.getenv("CI_COMMIT_REF_NAME")
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9v]{1,3}\.([0-9,.v-]|(groovy))+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

versionCatalogUpdate {
    versionSelector {
        !isNonStable(it.candidate.version)
    }
}

githubRelease {
    token System.getenv("GITHUB_TOKEN") ?: ""
    owner = "TIGERs-Mannheim"
    targetCommitish.set("master")
    repo.set("Sumatra")
    releaseAssets distZip
    tagName.set(project.version.toString())
}
